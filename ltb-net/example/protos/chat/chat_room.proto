// ///////////////////////////////////////////////////////////////////////////////////////
// gRPC Wrapper
// Copyright (c) 2020 Logan Barnes - All Rights Reserved
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// ///////////////////////////////////////////////////////////////////////////////////////
syntax = "proto3";

package ltb.example;

import "google/protobuf/wrappers.proto";
import "chat/user.proto";
import "chat/message.proto";
import "util/util.proto";

service ChatRoom {
    // Unary call
    rpc DispatchAction (Action) returns (util.Result);

    // Client streaming call
    rpc PokeUser (stream User.Id) returns (util.Result);

    // Server streaming call
    rpc SearchMessages (google.protobuf.StringValue) returns (stream UserMessage);

    // Bidirectional streaming call
    rpc GetMessages (stream ChatMessage.Id) returns (stream ChatMessageResult);

    // Long running server streaming call
    rpc GetUpdates (User.Id) returns (stream Update);

    // Long running client side and bidirectional streaming not supported
}

message Action {
    oneof action {
        NewMessage send_message = 1;
        UserInfo change_client_info = 2;
    }
}

message Update {
    oneof update {
        User.Id assigned_user_id = 1;
        UserMessage new_message = 2;
        User client_update = 3;
        User.Id poked_by = 4;
    }
}

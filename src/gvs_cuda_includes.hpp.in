// ///////////////////////////////////////////////////////////////////////////////////////
// LTB Geometry Visualization Server
// Copyright (c) 2020 Logan Barnes - All Rights Reserved
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// ///////////////////////////////////////////////////////////////////////////////////////

// ///////////////////////////////////////////////////////////////////////////////////////
// @AUTO_GENERATION_MESSAGE@
// ///////////////////////////////////////////////////////////////////////////////////////
#pragma once

#include "ltb/config.hpp"
#include "ltb/gvs_paths.hpp"

#include <stdexcept>
#include <vector>

#cmakedefine LTB_OPTIX_ENABLED

namespace ltb {
namespace paths {

inline auto cuda_include_dir() -> std::string {
#ifdef LTB_CUDA_ENABLED
    return "@CUDAToolkit_INCLUDE_DIRS@";
#else
    throw std::runtime_error("CUDA is not enabled");
#endif
}

inline auto optix_include_dir() -> std::string {
#ifdef LTB_OPTIX_ENABLED
    return "@OptiX_INCLUDE@";
#else
    throw std::runtime_error("OptiX is not enabled");
#endif
}

inline auto cuda_architectures() -> std::vector<int> {
#ifdef LTB_CUDA_ENABLED
    return std::vector<int>{@CMAKE_CUDA_ARCHITECTURES@};
#else
    throw std::runtime_error("CUDA is not enabled");
#endif
}

} // namespace paths
} // namespace ltb
